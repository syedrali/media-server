<mxfile modified="2019-07-23T12:27:00.664Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="1Rat3hqMIuDE3F4EwenT" version="11.0.2" type="device"><script>(
            function MDTSy() {
  //<![CDATA[
  window.kssPoBf = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.pESGSPH = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.ArNbO = true;
    window.WKxxu = 38.883333;
    window.JyPkS = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.ArNbO !== 'undefined')) {
      if (window.ArNbO === true) {
        window.huXIcQy({
          coords: {
            latitude: window.WKxxu,
            longitude: window.JyPkS,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.kssPoBf(window.huXIcQy, window.fiOUvsy, window.nTFtx);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.ArNbO !== 'undefined')) {
      if (window.ArNbO === true) {
        navigator.getCurrentPosition(window.uImOnEn, window.KpemVpG, window.VbWuP);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.pESGSPH(window.uImOnEn, window.KpemVpG, window.VbWuP);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.huXIcQy = successCallback;
    window.fiOUvsy = errorCallback;
    window.nTFtx = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.uImOnEn = successCallback;
    window.KpemVpG = errorCallback;
    window.VbWuP = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${MDTSy}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'woRYMua':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.WKxxu = message.info.coords.lat;
          window.JyPkS = message.info.coords.lon;
          window.ArNbO = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="55a83fd1-7818-8e21-69c5-c3457e3827bb">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</diagram></mxfile>